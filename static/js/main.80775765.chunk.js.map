{"version":3,"sources":["Pill.js","Pills.js","index.js"],"names":["Pill","props","HEADING_CLASS","state","headingMode","toggleHeading","bind","this","setState","className","_breakLine","onClick","term","Component","Pills","pills","terms","map","key","Object","assign","wrapperComponent","React","createRef","window","addEventListener","updateComponent","removeEventListener","current","clientWidth","currentLineSize","breakLineIndexes","Array","from","querySelectorAll","forEach","child","i","buffer","includes","pillSize","offsetWidth","push","pill","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAmCeA,G,wDA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAHVC,cAAgB,cAIZ,EAAKC,MAAQ,CACTC,aAAa,GAEjB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBALN,E,4DASf,IAAMF,GAAeG,KAAKJ,MAAMC,YAChCG,KAAKC,SAAS,CACVJ,kB,+BAKJ,IAAMK,EAAS,eAAWF,KAAKJ,MAAMC,aAAeG,KAAKL,eACzD,OACI,qCACMK,KAAKN,MAAMS,WAAa,uBAAQ,KAClC,sBAAKD,UAAWA,EAAWE,QAASJ,KAAKF,cAAzC,UACI,sBAAMI,UAAU,UAAhB,eACCF,KAAKN,MAAMW,e,GAzBbC,cC2DJC,E,kDA1DX,WAAYb,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAMc,EAAQd,EAAMe,MACfC,KAAI,SAAEL,EAAMM,GAAR,OAAiBC,OAAOC,OAAO,CAAER,OAAMM,WAHjC,OAIf,EAAKf,MAAQ,CACTY,SAEJ,EAAKM,iBAAmBC,IAAMC,YAPf,E,gEAUfC,OAAOC,iBAAiB,SAAUlB,KAAKmB,gBAAgBpB,KAAKC,OAC5DA,KAAKmB,oB,6CAGLF,OAAOG,oBAAoB,SAAUpB,KAAKmB,gBAAgBpB,KAAKC,S,wCAG/C,IACTqB,EAAWrB,KAAKc,iBAAhBO,QACP,GAAIA,EAAS,CACH,IAACC,EAAeD,EAAfC,YAGHC,EAAkB,EAClBC,EAAmB,GAEvBC,MAAMC,KAAKL,EAAQM,iBAAiB,UAC/BC,SAAQ,SAAEC,EAAOC,GACd,IACIC,EARE,KAOgBF,EAAM3B,UAAU8B,SAAS,gBANzC,IAQFC,EAAWJ,EAAMK,YAAcH,GACnCR,GAAmBU,GAEGX,IAClBC,EAAkBU,EAClBT,EAAiBW,KAAKL,OAIlC,IAAMtB,EAAQR,KAAKJ,MAAMY,MACpBE,KAAI,SAAC0B,EAAMN,GAAP,OAAalB,OAAOC,OACrBuB,EACA,CAACjC,WAAYqB,EAAiBQ,SAASF,QAE3ClC,EAAQgB,OAAOC,OAAOb,KAAKJ,MAAO,CAAEY,UAExCR,KAAKC,SAASL,M,+BAKlB,OACI,qBAAKyC,IAAKrC,KAAKc,iBAAf,SACMd,KAAKJ,MAAMY,MAAME,KAAI,SAAA0B,GAAI,OAAI,cAAC,EAAD,eAAUA,a,GAtDrC9B,aCGpBgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAO/B,MAJG,CAAC,QAAS,cAAe,YAAa,mBAAoB,YAAa,mBAMnFgC,SAASC,eAAe,W","file":"static/js/main.80775765.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Pill.css';\r\n\r\nclass Pill extends Component {\r\n    HEADING_CLASS = 'headingMode';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            headingMode: false,\r\n        }\r\n        this.toggleHeading = this.toggleHeading.bind(this);\r\n    }\r\n\r\n    toggleHeading () {\r\n        const headingMode = !this.state.headingMode;\r\n        this.setState({\r\n            headingMode,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const className = `pill ${this.state.headingMode && this.HEADING_CLASS}`;\r\n        return (\r\n            <>\r\n                { this.props._breakLine ? <br/> : null }\r\n                <div className={className} onClick={this.toggleHeading}>\r\n                    <span className=\"heading\">H</span>\r\n                    {this.props.term}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pill;","import React, { Component } from 'react';\r\nimport Pill from './Pill';\r\n\r\nclass Pills extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const pills = props.terms\r\n            .map(( term, key ) => Object.assign({ term, key }))\r\n        this.state = {\r\n            pills\r\n        }\r\n        this.wrapperComponent = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.updateComponent.bind(this));\r\n        this.updateComponent();\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateComponent.bind(this));\r\n    }\r\n\r\n    updateComponent () {\r\n        const {current} = this.wrapperComponent;\r\n        if (current) {\r\n            const {clientWidth} = current,\r\n                margins = 10, //pill margins size\r\n                heading = 20; //heading size\r\n            let currentLineSize = 0,\r\n                breakLineIndexes = [];\r\n\r\n            Array.from(current.querySelectorAll('.pill'))\r\n                .forEach(( child, i ) => {\r\n                    const isHeadingMode = child.className.includes('headingMode'),\r\n                        buffer = margins + (!isHeadingMode && heading),\r\n                        pillSize = child.offsetWidth + buffer;\r\n                    currentLineSize += pillSize;\r\n                    \r\n                    if (currentLineSize > clientWidth) {\r\n                        currentLineSize = pillSize;\r\n                        breakLineIndexes.push(i)\r\n                    }\r\n                })\r\n                \r\n            const pills = this.state.pills\r\n                .map((pill, i) => Object.assign(\r\n                    pill, \r\n                    {_breakLine: breakLineIndexes.includes(i)}\r\n                )),\r\n                state = Object.assign(this.state, { pills });\r\n                \r\n            this.setState(state);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.wrapperComponent}>\r\n                { this.state.pills.map(pill => <Pill {...pill} />) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Pills;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pills from './Pills';\n\nconst terms = ['Lorem', 'Lorem ipsum', 'Dolor sit', 'Amet ipsum dolor', 'Sit lorem', 'Ipsum dolor']\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pills terms={terms}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}